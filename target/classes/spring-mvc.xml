<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-1.7.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd"
		default-lazy-init="true">

<!-- 自动扫描且只扫描@Controller -->
	<context:component-scan base-package="lite.*.**.controller"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<mvc:resources location="/assets/" mapping="/assets/*/**" />
	<mvc:resources location="/template/" mapping="/template/*/**" />

	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
            </bean>
  		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="ignoreAcceptHeader" value="true" />
            <property name="defaultContentType" value="application/json" />
	    <property name="mediaTypes" >
	        <value>
	            json=application/json
	            xml=application/xml
	        </value>
	    </property>
	</bean>
	
	<!-- 定义JSP文件的位置 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>-->  
	
	<!--这个就是使用的http头信息里面的接收语言来判断用户的语言 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver">
	</bean>

	<bean id="freemarkerConfig"
		class="lite.erp.ext.freemarker.ShiroTagFreeMarkerConfigurer">
		<!-- .ftl文件存放的根目录 -->
		<property name="templateLoaderPath" value="/WEB-INF/views/" /><!-- 
			/WEB-INF/view/ -->
		<property name="freemarkerVariables">
			<map>
				<entry key="xml_escape" value-ref="fmXmlEscape" />
				<entry key="jsonutil" value-ref="jsonutil"/>
			</map>
		</property>
		<property name="freemarkerSettings">
			<props>
				<prop key="defaultEncoding">UTF-8</prop>
			</props>
		</property>
		<!--可以增加其他freemarker的配置，详情请参阅FreeMarkerConfigurerAPI -->
	</bean>
	
	<bean id="jsonutil" class="lite.erp.ext.freemarker.JSONUtil"/>

	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />

	<!-- 支持上传文件 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		<property name="defaultEncoding" value="UTF-8"/> -->
	<!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 <property 
		name="maxUploadSize" value="200000"/> </bean> -->
	<!-- <bean id="multipartResolver" class="lite.plugin.kindeditor.DefaultMultipartResolver"> 
		<property name="defaultEncoding" value="UTF-8" /> </bean> -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json;chartset=UTF-8" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
				<bean
					class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
					<property name="cache" value="false" />
					<property name="prefix" value="" /><!-- /WEB-INF/view/ -->
					<property name="suffix" value=".ftl" />
					<property name="exposeSpringMacroHelpers" value="true" />
					<property name="exposeRequestAttributes" value="true"/>
                    <property name="exposeSessionAttributes" value="true"/><!--  exposeRequestAttributes  exposeSessionAttributes两个属性都被设置为true。结果是请求和会话属性都被复制到模板的属性集中，可以使用FreeMarker的表达式语言来访问并显示。
使用这些宏，必须设置FreeMarkerViewResolver的exposeSpringMacroHelpers属性为true -->
					<property name="requestContextAttribute" value="request"/><!-- 将request对象显未到模板上,可以使用request获取对象 -->
					<property name="contentType" value="text/html; charset=utf-8" />
				</bean>
				<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
					<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
					/> <property name="prefix" value="/WEB-INF/view/" /> <property name="suffix" 
					value=".jsp"></property> </bean> -->
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView">
					<property name="contentType" value="application/json;chartset=UTF-8" />
				</bean>
				<!-- 输出为xml数据 <bean id="marshallingView" class="org.springframework.web.servlet.view.xml.MarshallingView"> 
					<property name="marshaller"> <bean id="xStreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller"> 
					<property name="autodetectAnnotations" value="true" /> </bean> </property> 
					<property name="contentType" value="application/xml" /> </bean> -->
			</list>
		</property>
	</bean>
	
	
	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL-->
	<mvc:default-servlet-handler/>
	
	<!-- 定义无需Controller的url<->view直接映射 -->
	<mvc:view-controller path="/" view-name="index"/>
	
	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
		<property name="exceptionMappings">  
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<prop key="java.lang.Throwable">error/500</prop>
            </props>  
		</property>  
    </bean> 
    
	<!-- 支持 Shiro对Controller的方法级AOP安全控制  begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	<!-- end -->
</beans>
